// Skeleton generated by Hyland Unity Editor on 10/29/2018 1:40:49 PM
namespace HistoricalEOBDuplicates
{
    using System;
    using System.Text;
    using Hyland.Unity;
    using Hyland.Unity.CodeAnalysis;
    using Hyland.Unity.Workflow;
	using System.Data;	
	using System.Data.SqlClient;
	using System.IO;      
    
    /// <summary>
    /// Sorts out duplicate EOBS and adds them to a workflow
    ///
    /// </summary>
    public class HistoricalEOBDuplicates : Hyland.Unity.IWorkflowScript
    {
		#region VariablesAndConstants
		// *** Logging Parameters ***		
			private const Diagnostics.DiagnosticsLevel DIAGNOSTICS_LEVEL = Diagnostics.DiagnosticsLevel.Verbose;		
			private bool Logging_Enabled = true;
			private const string LOG_DIRECTORY = @"\\corpfs01\GLOBAL\SHARED\OnBase\msg\";	
			private string str_OnBase_Environment = "";
			private string str_Log_Filename = "";		
			private string str_Connection_String = "";
			private int int_ItemNum = 0;
			private const int LIFE_CYCLE_ID = 329;
		#endregion  
        #region IWorkflowScript
        /// <summary>
        /// Implementation of <see cref="IWorkflowScript.OnWorkflowScriptExecute" />.
        /// <seealso cref="IWorkflowScript" />
        /// </summary>
        /// <param name="app"></param>
        /// <param name="args"></param>
        public void OnWorkflowScriptExecute(Hyland.Unity.Application app, Hyland.Unity.WorkflowEventArgs args)
        {
            try {									
				#region Initial_Parameters
				args.ScriptResult = false;
				app.Diagnostics.Level = DIAGNOSTICS_LEVEL;	
				app.Timeout = 3600; // 6 minutes
				app.Configuration.TryGetValue("Environment", out str_OnBase_Environment);
                    if (str_OnBase_Environment == "") { str_OnBase_Environment = "UNK"; }
                    str_Log_Filename = Path.Combine(LOG_DIRECTORY, str_OnBase_Environment + "_Historical_EOB_Documents_" + DateTime.Now.ToString("yyyyMMdd") + ".txt");
                    Log(app, String.Format(">>{0} - Starting Script ==> {1}_Historical_EOB_Documents {2}: {3}", app.CurrentUser.RealName, str_OnBase_Environment, "V1", DateTime.Now.ToString()));
                    Log(app, String.Format("Setting str_OnBase_Environment:{0} variables", str_OnBase_Environment));
                    switch (str_OnBase_Environment)
                    {
                        case "Production":
                            str_Connection_String = @"SERVER=xxx;Database=xxx;Uid=xxx;pwd=xxx";
                            break;
                        case "OBTest1":
                            str_Connection_String = @"Server=xxx;Database=xxx;Uid=xxx;pwd=xxx";
                            break;
                        case "OBTest2":
                            str_Connection_String = @"Server=xxx;Database=xxx;Uid=xxx;pwd=xxx";
                            break;
                        default:
                            // No Environment Found
                            // str_exportDirectory = @"\\corpfs01\global\SHARED\OnBase\UnknownEnvironment_";
                            break;
                    }					
				Log(app, String.Format("OnBase Environment Variables Configured.  str_Connection_String={0}",str_Connection_String));
				#endregion
				Workflow workflow = app.Workflow;
                if (workflow == null)
                {
                    throw new ApplicationException("The workflow object was not returned.");
                }					
					Log(app, String.Format("Get Lifecycle {0}.", LIFE_CYCLE_ID));	
					LifeCycle lifeCycle = app.Workflow.LifeCycles.Find(LIFE_CYCLE_ID);
	                if (lifeCycle == null)
	                {
	                    throw new Exception(string.Format("LifeCycle {0} does not exist.", LIFE_CYCLE_ID));
	                }
				
				#region Get_Duplicate_Doc_Handles											
				
				// Document doc = args.Document;
				//Form form = doc.UnityForm;
				Log(app, ">>Runing SQL to Get Doc IDs:");				
				// Query OnBase for a list of ICN Numbers
				string str_SQL_Query = @"Select max(ki.itemnum) as MaxItem
										from hsi.keyitem1803 ki
										INNER JOIN (SELECT keyvaluechar, COUNT(*) as DupCount
										FROM keyitem1803 
										JOIN itemdata on itemdata.itemnum = keyitem1803.itemnum 
										WHERE itemdata.status <> 16 
										and itemdata.itemtypenum = 1512
										and keyvaluechar like 'PDF_%' 
										GROUP BY keyvaluechar HAVING COUNT(*) > 1) as Dups on Dups.keyvaluechar = ki.keyvaluechar
										group by ki.keyvaluechar";

				Log(app, String.Format("str_SQL_Query:{0}",str_SQL_Query));
				
				using (SqlConnection connection = new SqlConnection(str_Connection_String))
					{										
						SqlCommand command = new SqlCommand(str_SQL_Query, connection);
						command.CommandTimeout = 150;
						connection.Open();	
						Log(app, String.Format("==>Connecting:"));		
						var reader = command.ExecuteReader();
	
						Log(app, String.Format("==>SQL Query Reader Results:"));					
						while (reader.Read())
						{					
							int_ItemNum = reader.GetInt32(0);
							Log(app, String.Format("Returned Document {0}.", int_ItemNum.ToString()));	
							Document document = app.Core.GetDocumentByID(int_ItemNum);
							if (document == null) {
								throw new Exception(string.Format("Document {0} does not exist.",int_ItemNum.ToString()));
							}
							app.Workflow.AddToLifeCycle(document, lifeCycle);
							Log(app, String.Format("Document {0} added to life cycle {1}", int_ItemNum.ToString(), LIFE_CYCLE_ID));							

						} // End Read
						reader.Close();	

					} // End SQL Connecting				
				#endregion
				args.ScriptResult = true;
				Log(app, ">>Exiting Script Successfully!");										
				
				Log(app, "=");				
								
				
			}
            catch (Exception ex) {
                Log(app, "!!!! Error Creating Unity Form.");
                // Log(app, String.Format("Keyword: {0}, DataType: {1}, Value: {2}",fd.ToString(), fd.FieldDefinition.DataType.ToString(), fd.Value.ToString()));
                Log(app, ex.ToString());
				Log(app, "=");	
            }
		}
 
				
		private void Log(Application app, string strMessage)
        {
			try {
				// Don't log blank lines or separator lines to diagnostics console
				if (strMessage != "=" || strMessage != "") {
					app.Diagnostics.WriteIf(Hyland.Unity.Diagnostics.DiagnosticsLevel.Verbose, strMessage);
				}
				if (Logging_Enabled) {			
					if (strMessage == "=") { strMessage = "========================================================";}
					TextWriter tw = new StreamWriter(str_Log_Filename, true);
					tw.WriteLine(strMessage);
					tw.Close();
				} 			
			}
            catch (Exception ex)
            {
                app.Diagnostics.WriteIf(Hyland.Unity.Diagnostics.DiagnosticsLevel.Error, "Logging EX:" + ex);
               //  args.ScriptResult = false;
            }	
        }
		#endregion
    }	
	
}
