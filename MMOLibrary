
#region SUMMARY OF LIBRARY & EXAMPLE
//--------------------------------------------------------
	#region LIBRARY DESCRIPTION, PURPOSE, USAGE
/*
	AUTHOR: Mario Spies & Justin Soltesz
	DATE: 12/14/2018
	DESCRIPTION: The MMOCustomLibrary was created with the primary focus of eliminating recurrent logging methods and to hold one single, global variable 
				 that will reference the viewer password of the specifin OB environment (OBTest1, OBTest2, or Production). MMOCustomLibrary will be referenced 
				 in each Unity Script, in which will instantiate an instance of the MMO class contained within this Library. The instance of MMO class is what 
				 will handle both the logging and the 'viewer' password. 
				---------------------------------------------------------------------------------------------------------------------------------------------
				1. The Viewer Password
					- Two Configuration Items were created:'Environment' and 'viewer' 
					- The value of 'Enviroment' is set to the environment in which the script is being executed in (OBTest1, OBTest2, or Production).
					- The value of 'viewer' is set to the password of that enviroment needed to make a connection to the database. 
					
					Summary: The MMO Class will contain two global variables that reference the two configuration items. Each script will use those 
							 variables while decipher the current environment and its password. The values of those variables will always be dependent on 
							 the MMO Class. Therefore, anytime the viewer password value is needed to be changed, it will only require the change in one 
							 single location (the config item) to update all scripts refrencing the password. 
				---------------------------------------------------------------------------------------------------------------------------------------------
				2. Logging to a Text File
				  - The Application, the unity script & the script arguments are passed as parameters in the constructor. 
				  - The methods InitializeItems(), BeginLog() and Log() are all involved in the logging process. 
				  - All variables used for logging: LOG_DIRECTORY, str_Log_Filename, strErrorMessage, str_scriptVersion, str_scriptAssemblyName, 
					script, args, app.
				
					Summary: The MMO Class will contain a method in which will log to text file. The location and the name of the file is pre-determined
							 by using the current date and the following variables; ENVIRONMENT, str_scriptVersion & str_scriptAssemblyName. A Log is 
							 ALWAYS written to when a script is executed for the sake of whether the execution was sucessful or not. Each log will contain
							 the name of the user, the execution date & time, the assembly name and verision of the script during the run. 
				---------------------------------------------------------------------------------------------------------------------------------------------
*/
#endregion
//--------------------------------------------------------
	#region STEP BY STEP IMPLEMENTATION 
		/* ---------------------------------------------------------------------------------------------------------------
		The implemetation of the Library reference should follow the following procedure:

			1. Import Library 
					--> using MMOCustomLibrary
				2. Instance of class 
					--> private MMO library
				3. Instatiate class w/ workflow script & unity application as parameters 
					--> library = new MMO(this, app, args)
					--> this - will be used to get the current version of the script
					--> args - will be used for script results 
				4. Initialize variables
					--> library.InitializeConfigItems
		-------------------------------------------------------------------------------------------------------------- */
	#endregion 
	#region EXAMPLE OF SCRIPT REFRENCING & IMPLEMENTING THE LIBRARY

		#region CODE WITH COMMENTS
			/*
				// Skeleton generated by Hyland Unity Editor on 10/23/2018 9:01:39 AM

				namespace Test
				{
					using System;
				    using Hyland.Unity;
				    using Hyland.Unity.CodeAnalysis;
				    using Hyland.Unity.Workflow;
					
					// STEP 1: ADD LIBRARY REFERENCE
					//----------------------------------------------------------------------
					using MMOCustomLibrary; 
					//----------------------------------------------------------------------
				    

				    public class Test : Hyland.Unity.IWorkflowScript
				    {
						//STEP 2: ADD INSTANCE OF LIBRARY OBJECT
						//----------------------------------------------------------------------
				        private MMO library; 
						//----------------------------------------------------------------------
					
						//STEP 3: ADD LOGGING VARIABLES
						//----------------------------------------------------------------------
						private const Diagnostics.DiagnosticsLevel DIAGNOSTICS_LEVEL = Diagnostics.DiagnosticsLevel.Verbose;
						//----------------------------------------------------------------------
						
				        #region IWorkflowScript
				        public void OnWorkflowScriptExecute(Hyland.Unity.Application app, Hyland.Unity.WorkflowEventArgs args)
				        {			
							try{
						// STEP 4: Always default script to return false. 
						//----------------------------------------------------------------------
								args.ScriptResult = false;
						//----------------------------------------------------------------------
							
						// STEP 5: Set up Library and write header row.
						//----------------------------------------------------------------------
							The Class constuctor will call the method "InititializeItems() within the library. The following Variables are set when Initialized:
								- public string ENVIRONMENT; //set to "environment" Configuration Item (Prod, OBTest1, or OBTest2)
								- public string VIEWER_PASS; //set to "viewer" Configuration Item (SQL Viewer account's password)
								library = new MMO(this,app,args);
						//----------------------------------------------------------------------
							

								
								// By default Logging is enabled. If you do not want to write out to the Log then set Logging_Enabled to "false".
							
								// Logging_Enabled = false;
								
								// Add a line to the log file.
								library.Log("This is a test.");
								
						// STEP 7: EXIT SCRIPT SUCESSFULLY 
						//----------------------------------------------------------------------
								args.ScriptResult = true;	
						//----------------------------------------------------------------------
							}
							catch(Exception e){ 
								library.Log("!!! Error Executing Script:" + e.ToString());
							}
					
				        }
				        #endregion
				    }
				}
			*/
	#endregion

		#region CODE W/O COMMENTS
/*
			++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			+ Script Example Usage:
			++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

			namespace Test
			{
				using System;
			    using Hyland.Unity;
			    using Hyland.Unity.CodeAnalysis;
			    using Hyland.Unity.Workflow;
				using MMOCustomLibrary; 

			    public class Test : Hyland.Unity.IWorkflowScript{

			        private MMO library; 
					private const Diagnostics.DiagnosticsLevel DIAGNOSTICS_LEVEL = Diagnostics.DiagnosticsLevel.Verbose;

			        public void OnWorkflowScriptExecute(Hyland.Unity.Application app, Hyland.Unity.WorkflowEventArgs args){		

						try{
							args.ScriptResult = false;
							library = new MMO(this,app);
							// Logging_Enabled = false;
							library.Log("This is a test.");
							args.ScriptResult = true;	
						}

						catch(Exception e){ 
							library.Log("!!! Error Executing Script:" + e.ToString());
						} 
					}
				}
			}

			++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			*/
		#endregion
#endregion

#endregion

namespace MMOCustomLibrary{

	#region REFERENCES
	using System;
    using System.Text;
	using System.IO;
	using System.Text.RegularExpressions;
    using Hyland.Unity;
    using Hyland.Unity.CodeAnalysis;
 #endregion
	
	public class MMO {
		
		#region INSTANCE VARIABLES
		
		// GLOBAL VARIABLES
		public string ENVIRONMENT; //set to "environment" Configuration Item
		public string VIEWER_PASS; //set to "viewer" Configuration Item
		public string ONBASE_CONNECTION_STRING; //For Viewer to connect.  Ex: @"SERVER=beachhysqlrs;Database=OnBase;Uid=viewer;pwd=Zf6#1990"
	
		// LOGGING VARIABLES
		bool Logging_Enabled = true;
		private const Diagnostics.DiagnosticsLevel DIAGNOSTICS_LEVEL = Diagnostics.DiagnosticsLevel.Verbose;	
		private const string LOG_DIRECTORY = @"\\corpfs01\global\SHARED\OnBase\msg\"; // Directory of log 
		private StringBuilder str_logMessage; 
		
		// UNITY SCRIPT VARIABLES
		private string str_Log_Filename;// Full path of log . // --> "LOG_DIRECRORY/'ENVIRONMENT'/'ScriptName_Date'.txt"	
		private string str_scriptVersion;
		private string str_scriptAssemblyName; 
		
		// PARAMETER VARIABLES
		private Hyland.Unity.IWorkflowScript script; //used to pass assembly info
		private Hyland.Unity.WorkflowEventArgs args;
		private Hyland.Unity.Application app; //instead of having to pass the Hyland App each time you log, it is set to its own instance. 
		
	#endregion
		
		#region CLASS CONSTRUCTOR
		public MMO(Hyland.Unity.IWorkflowScript theScript, Hyland.Unity.Application theApp, Hyland.Unity.WorkflowEventArgs theArgs ){	
			/* DESCRIPTION: Set the script and application to instance */
			this.script = theScript;
			this.app = theApp; //Hyland application
			
			this.args = theArgs; 
			InitializeItems();							
		}
		#endregion

		
		#region INITIALIZE ALL VARIABLES
		public void InitializeItems()
		{ 
			/* DESCRIPTION: Initialize the configuration and then use the executing scripts arguments to 
							set variables to the name and verision of that script. These variables will be 
							used to determine the path of the log file as well as automatically creating 
							the name of the file.*/
			
			#region INTIALIZE CONFIGURATION ITEMS
			/* Gets config items that will return the Onbase environment and viewer password. */
			app.Configuration.TryGetValue("Environment", out ENVIRONMENT); //Set 'Environment' to the current environment --> OBTest1, OBTest2, or OnBase
			app.Configuration.TryGetValue("viewer", out VIEWER_PASS); //Set 'VeiwerPassword' to the password that will connect to DB 
			
			switch (ENVIRONMENT)
		        {
		            case "Production":
		                ONBASE_CONNECTION_STRING = @"Server=beachhysqlrs;Database=OnBase;Uid=viewer;pwd=" + VIEWER_PASS;
		                break;
		            case "OBTest1":
		                ONBASE_CONNECTION_STRING = @"Server=beachhysqldev;Database=OBTest1;Uid=viewer;pwd=" + VIEWER_PASS;
		                break;
					case "OBTest2":
		                ONBASE_CONNECTION_STRING = @"Server=beachhysqldev;Database=OBTest2;Uid=viewer;pwd=" + VIEWER_PASS;
		                break;
		        }			
			#endregion			
	
			#region GET THE ASSEMBLY INFORMATION TO LOG AT BEGINNING OF TEXT FILE
			/* split the 'Assembly Qualified Name' string to get the scripts Name and Version. Bothe the Name and Version are put into seperate strings */
			string[] lines = Regex.Split(this.script.GetType().AssemblyQualifiedName.ToString(),(",")); // "namespace.class" to get class name
			this.str_scriptAssemblyName = String.Format("{0}", Regex.Match(lines[0],@"(.*)\.\w*").Groups[1]); //Name of script. Used for log file
			this.str_scriptVersion =  String.Format("{0}", lines[1]); //id & version of script.
			#endregion
							
			#region SET THE PATH AND FILE NAME
			str_Log_Filename = Path.Combine(LOG_DIRECTORY + @"\" + this.ENVIRONMENT + @"\", this.str_scriptAssemblyName + "_" + DateTime.Now.ToString("yyyyMMdd") + ".txt"); // --> "LOG_DIRECRORY/'ENVIRONMENT'/'ScriptName_Date'.txt"
			#endregion
			
			BeginLog();
		}
		#endregion
		
		#region TEXT SEPERATOR
		public void LogSeperator()
		{
			Log("``````````````````````````````````````````````````````````````````````````````````````````````"); // Prints this line to the Log file, which can be used to seperate sections of text.
		}
		#endregion
		
		#region LOG BEGGINING OF LOG
		public void BeginLog(){
			/*Description: US*/
			Log("\r\n");
			Log("***************************************************************************************************" +
			"\r\n" + "* ---------------------------------------------------------------------------------------------------");
			Log(String.Format("* Script Name: {0} ({1}) ",this.str_scriptAssemblyName, this.str_scriptVersion));
			Log(String.Format("* DATE: {0} " + "\r\n" + "* USER: {1}", DateTime.Now.ToString("dddd, dd MMMM yyyy HH:mm:ss"),app.CurrentUser.RealName));	//Log the current date and name of use
			
			Log("* ---------------------------------------------------------------------------------------------------");
			
		}
		#endregion
		
		#region LOG TO FILE 
		public void Log(string strMessage)
        {
			try
			{ 			
				if (strMessage != "=" || strMessage != "") // Don't log blank lines or separator lines to diagnostics console
					{app.Diagnostics.WriteIf(Hyland.Unity.Diagnostics.DiagnosticsLevel.Verbose, strMessage); }
				
				if (Logging_Enabled){			
					if (strMessage == "=") 
						{LogSeperator(); } 
					
					TextWriter tw = new StreamWriter(str_Log_Filename, true);
					tw.WriteLine(strMessage);
					tw.Close();	
					this.str_logMessage.AppendLine(strMessage);						
				}
			}
			
			
			catch (Exception ex)
       		{ 
				app.Diagnostics.WriteIf(Hyland.Unity.Diagnostics.DiagnosticsLevel.Error, "Logging EX:" + ex);
               //  args.ScriptResult = false;
            }	
		}
		#endregion
		
		#region MOVE TO ERROR FOLDER
		public void Error(){ 
			str_Log_Filename = str_Log_Filename.Insert(str_Log_Filename.Length - (this.str_scriptAssemblyName.Length + 13), @"Error\");
			BeginLog();
			Log(this.str_logMessage.ToString());
		}
		#endregion
	}
	

	
}
